<<<<<<< HEAD
=======
(function (window) {
	'use strict';
    var footageFloder = "footage";
    var videoSources = [
        ['Q',0,0,0],
        ['W',0,1,0],
        ['E',0,2,0],
        ['MQ',1,0,0],
        ['MW',1,1,0],
        ['ME',1,2,0],
    ]
    var vSourceIndex = 0 ;
    var flickerSource = "flicker_3s";
    var videoType = "video/mp4";

    var VIDEO_NAME = 0;
    var VIDEO_BUTTON_NUM = 1;
    var VIDEO_SCALE_NUM = 2;
    var VIDEO_START_TIME = 3;

    var ButtonConstruct = [
        [128,512,900],
        [100,500,1000],
        [200,300,700,900]
    ]

    var keypressButtonChange = 20;
    var clearRange = 0.3;
    var noiseOpacityChange = 0.02;
    var FPS = 30;

    var Point = {
     createNew : function(_val , _video , _id ) {
         var point = {};
         point.val = _val;
         point.video = _video;
         point.myId = _id;
         return point;
     }
    };

    var MyButton = {
     createNew : function(_pointList) {
         var button = {};
         button.pointList = _pointList;
         return button;
     }
    }

    var videoFrame;
    var vFlicker;
    var buttons;

    function video2path (videoName) {
        return "../" + footageFloder + "/" + videoName + ".mp4";
    }

    function init () {

        // initilize framework div
        videoFrame = document.createElement("div");
        videoFrame.className = "videoFrame";
        videoFrame.id = "mv";
        document.body.appendChild(videoFrame);


        // set up filter effect video
        var flickerPath = video2path(flickerSource);
        var flicker = document.createElement("video");
        flicker.type = "video/mp4";
        flicker.src = flickerPath;
        flicker.loop = true;
        // video.crossOrigin = 'anonymous';
        flicker.preload = 'none';
        flicker.id = 'flicker';
        flicker.autoplay = true;

        videoFrame.appendChild(flicker);
        vFlicker = $("#flicker");
        vFlicker.css("z-index",100);


        buttons = [];
        for (var i = 0; i < ButtonConstruct.length; i++) {
            var pl = [];
            var button = MyButton.createNew(pl);
            buttons[buttons.length] = button;
            for (var j = 0 ; j < ButtonConstruct[i].length; j++)
            {
                // set up a video for this point:
                var video = document.createElement("video");
                video.type = videoType;
                video.src = "";
                video.preload = 'none';
                video.id = 'video-'+i.toString()+'-'+j.toString();
                video.autoplay = true;
                videoFrame.appendChild(video);

                var v = $("#"+video.id);
                
                // create a new point
                var p = Point.createNew(ButtonConstruct[i][j],v,video.id);
                hideVideo(p);
                // append the point to point list
                pl[pl.length]=p;
            }
        };


         setInterval(function() {
            update();
        }, 1000/FPS );
    }

    // temp button value; for test
    var buttonTempValue = [0,0,0];
    var tempButton = 0 ;
    var noiseOpacity = 1;
    var tempPoint = null;
    var currentTime = 0 ;
    function update()
    {
        // update noise
        var p = getClearPoint(buttonTempValue[tempButton],buttons[tempButton].pointList);
        
        if (p == null ) // video not found
        {
            noiseOpacity += noiseOpacityChange;
        }else // video found
        {
            if (noiseOpacity >= 1 ) // now noise
            {
                if (tempPoint != null)
                    hideVideo(tempPoint);
                showVideo(p);
                tempPoint = p;
                noiseOpacity -= noiseOpacityChange;
            }else  // now shows video
            {
                if (tempPoint.myId == p.myId) // the same video
                {
                    noiseOpacity -= noiseOpacityChange;
                }else
                {
                    noiseOpacity += noiseOpacity;
                }
            }
        }

        if ( noiseOpacity < 0 ) noiseOpacity = 0;
        if ( noiseOpacity > 1 ) noiseOpacity = 1;
        vFlicker.css("opacity",noiseOpacity);

        // update videos
        currentTime += 1000 / FPS;
        if ( videoSources.length > vSourceIndex)
        if ( currentTime > videoSources[vSourceIndex][VIDEO_START_TIME])
        {
            importVideoFromSource(videoSources[vSourceIndex]);
            vSourceIndex++;
        }
        console.log(buttonTempValue + " " + tempButton.toString() + " " );
        if (tempPoint != null)
            console.log(tempPoint.myId);
    }
>>>>>>> update the new video play mechanism

    function importVideoFromSource(sourceInfo)
    {
        var path = video2path(sourceInfo[VIDEO_NAME]);
        var Ibtn = sourceInfo[VIDEO_BUTTON_NUM];
        var Jscl = sourceInfo[VIDEO_SCALE_NUM];
        var video = buttons[Ibtn].pointList[Jscl].video;
        video.attr('src',path);
        // video.play();

    }

    function hideVideo(p)
    {
        p.video.hide();
    }

    function showVideo(p)
    {
        p.video.show();
    }

    function getClearPoint(value,pointList)
    {
        for (var i = 0; i < pointList.length; i++ ) {
            // check forword
            var preVal = 0 ;
            if (i != 0 )
                preVal = pointList[i-1].val;
            var preI = pointList[i].val - preVal;
            var forVal = 1023;
            if (i != pointList.length-1)
                forVal = pointList[i+1].val;
            var forI = forVal - pointList[i].val;
            if ( value > ( pointList[i].val - preI * clearRange) && 
                value < (pointList[i].val + forI * clearRange) )
            {
                return pointList[i];
            }
        };
        return null;
    }


    function doKeyPress(e){
          if (e.keyCode == 'w'.charCodeAt(0) )
          {
            buttonTempValue[0] += keypressButtonChange;
            tempButton = 0;
          }


          if (e.keyCode == 'e'.charCodeAt(0) )
          {
            buttonTempValue[1] += keypressButtonChange;
            tempButton = 1;
          }

          if (e.keyCode == 'r'.charCodeAt(0) )
          {
            buttonTempValue[2] += keypressButtonChange;
            tempButton = 2;
          }

          if (e.keyCode == 's'.charCodeAt(0) )
          {
            buttonTempValue[0] -= keypressButtonChange;
            tempButton = 0;
          }

          if (e.keyCode == 'd'.charCodeAt(0) )
          {
            buttonTempValue[1] -= keypressButtonChange;
            tempButton = 1;
          }

          if (e.keyCode == 'f'.charCodeAt(0) )
          {
            buttonTempValue[2] -= keypressButtonChange;
            tempButton = 2;
          }
    }

    init();
    window.addEventListener('keypress', doKeyPress,false);








/////////////////////////
	// var document = window.document;
	// var footageFloder = "../footage"
	// var videoSources = [
	// 	'Q',
	// 	'W',
	// 	'E']
	// var extraSources = [
	// 	'MQ',
	// 	'MW',
	// 	'ME'
	// ]
	// var extraSource 
	// var type = 'video/mp4'

 //    var keyPressChange = 10;
 //    var noiseOpacityChange = 0.03;

 //    var FPS = 30;
	// // var oriVideosPop = new Array(3);


	// // record the static point of the original video
	// var pointOfViewPoint = [
	// 	0,
	// 	128,
	// 	512,
	// 	900,
	// 	1023,
	// ]
	// var oriPoints = new Array(pointOfViewPoint.length);
	// var oriVideos =  new Array(pointOfViewPoint.length-2);

	// // record the static point of the extra video
	// var realityViewPoint = [
	// 	0,
	// 	100,
	// 	500,
	// 	1000,
	// 	1023,
	// ]
	// var extraPoints = new Array(realityViewPoint.length);
	// var extraVideos =  new Array(realityViewPoint.length-2);

	// var Point = {
	// 	createNew : function(_val , _video , _isReality) {
	// 		var point = {};
	// 		point.val = _val;
	// 		point.video = _video;
	// 		point.isReality = _isReality;
	// 		return point;
	// 	}
	// };

	// var clearRange = 0.3;

	// var flickerEffectVideo;

 //    var buttons = new Array()


	// function init()
	// {
	// 	// init the div
	// 	var videoFrame = document.createElement("div");
	// 	videoFrame.className = "videoFrame";
	// 	videoFrame.id = "mv";
	// 	document.body.appendChild(videoFrame);
	// 	// initilize original videos
	// 	for (var i = 0; i < oriVideos.length; i++) {
	// 		var videoPath = footageFloder + "/"+videoSources[i]+".mp4";
	// 		var video = document.createElement("video");
	// 		video.type = type;
	// 		video.src = videoPath;
	// 		// video.crossOrigin = 'anonymous';
	// 		video.preload = 'none';
	// 		video.id = 'oriVideo' + i;
	// 		video.autoplay = true;
	// 		// video.loop = true;
	// 		// video.controls = true; //for debugging
	// 		videoFrame.appendChild(video);

	// 		oriVideos[i] = $('#'+video.id);
	// 		if (i != 0)
	// 			oriVideos[i].hide();

	// 		console.log("create " + videoPath);
	// 	};

	// 	for (var i = 0; i < extraVideos.length; i++) {
	// 		// var videoPath = footageFloder + "/"+videoSources[i]+".mp4";
	// 		var video = document.createElement("video");
	// 		video.type = type;
	// 		video.src = videoPath;
	// 		// video.crossOrigin = 'anonymous';
	// 		video.preload = 'none';
	// 		video.id = 'ExtraVideo' + i;
	// 		video.autoplay = true;
	// 		// video.loop = true;
	// 		// video.controls = true; //for debugging
	// 		videoFrame.appendChild(video);

	// 		extraVideos[i] = $('#'+video.id);
	// 		extraVideos[i].hide();
	// 	};

	// 	//TODO: For test
	// 	extraVideos[0].attr("src", "../footage/MQ.mp4");
	// 	extraVideos[1].attr("src", "../footage/MW.mp4");
	// 	extraVideos[2].attr("src", "../footage/ME.mp4");

	// 	// set up filter effect video
	// 	var flickerPath = footageFloder + "/flicker_3s"+".mp4";
	// 	var flicker = document.createElement("video");
	// 	flicker.type = "video/mp4";
	// 	flicker.src = flickerPath;
	// 	flicker.loop = true;
	// 	// video.crossOrigin = 'anonymous';
	// 	flicker.preload = 'none';
	// 	flicker.id = 'flicker';
	// 	flicker.autoplay = true;

	// 	videoFrame.appendChild(flicker);
	// 	flickerEffectVideo = $("#"+flicker.id);
 //        flickerEffectVideo.css("z-index",100);
	// 	// flickerEffectVideo.hide();

	// 	for (var i = oriPoints.length - 1; i >= 0; i--) {
	// 		if ( i == oriPoints.length - 1 || i == 0 )
	// 		{
	// 			oriPoints[i] = Point.createNew(pointOfViewPoint[i],null,true);
	// 		}else
	// 		{
	// 			oriPoints[i] = Point.createNew(pointOfViewPoint[i],oriVideos[i-1]);
	// 		}
	// 	};

	// 	for (var i = extraPoints.length - 1; i >= 0; i--) {
	// 		if ( i == extraPoints.length - 1 || i == 0 )
	// 		{
	// 			extraPoints[i] = Point.createNew(realityViewPoint[i],null,false);
	// 		}else
	// 		{
	// 			extraPoints[i] = Point.createNew(realityViewPoint[i],extraVideos[i-1]);
	// 		}
	// 	};
	// 	// setUpPoint

 //        // initialize update
 //         setInterval(function() {
 //            update();
 //        }, 1000/FPS );
	// }

 //    var noiseOpacity = 1;
 //    var tempPoint;
 //    var tempButton = 0;
 //    function update () {
 //        flickerEffectVideo.css("opacity",noiseOpacity);
 //    }




 //    var transparentProcess = 0;
 //    function setTrans(videoA,videoB,process)
 //    {
 //    	console.log("process" + process.toString());
 //    	if (process > 1 ) process = 1;
 //    	if (process < 0 ) process = 0;


 //    	// hide all  the videos, orignal and extra
 //    	hideAll();

 //    	// set opacity of video A
 //    	if (videoA != null)
 //    	{
 //        	videoA.show();
 //        	videoA.css("opacity",process);
 //    	}

 //    	if (videoB != null)
 //    	{
 //        	videoB.show();
 //        	videoB.css("opacity",1-process);
 //    	}

 //    	//if the flicker effect is needed, then
 //    	if (process != 1 && process != 0)
 //    	{
	//         flickerEffectVideo.show();
 //        	flickerEffectVideo.css("opacity", (process>0.5)? (1-process) * 2 : process*2);
 //    	}else
 //    	{
 //    		flickerEffectVideo.hide();
 //    	}
 //    }

 //    var pointOfView = 0;
 //    var realityView = 0;
 //    function doKeyPress(e){
 //          if (e.keyCode == 'w'.charCodeAt(0) || e.keyCode == 'W'.charCodeAt(0) )
 //          {
 //          	pointOfView += keyPressChange;
 //          	OnPointOfViewChange(pointOfView);
 //          }
 //          if (e.keyCode == 's'.charCodeAt(0) || e.keyCode == 'S'.charCodeAt(0) ) // g
 //          {
 //          	pointOfView -= keyPressChange;
 //          	OnPointOfViewChange(pointOfView);
 //          }


 //          if (e.keyCode == 'e'.charCodeAt(0) || e.keyCode == 'E'.charCodeAt(0) ) // g
 //          {
 //          	realityView += keyPressChange;
 //          	OnRealityViewChange(realityView);
 //          }
 //          if (e.keyCode == 'd'.charCodeAt(0) || e.keyCode == 'D'.charCodeAt(0) ) // g
 //          {
 //          	realityView -= keyPressChange;
 //          	OnRealityViewChange(realityView);
 //          }

<<<<<<< HEAD
	init();
=======
          
 //          if (e.keyCode == 104 || e.keyCode == 72 ) // h
 //          {
 //            video[0].prop("currentTime",0);
 //          }
 //     }

 //     var isReality = true;
 //     // called when point of view changed
 //     // change the transfromation status of the video
 //     // (adjust the opacity)
 //     // pointOfView : int range  from 0..1023
 //     function OnPointOfViewChange(pointOfView)
 //     {
 //     	isReality = true;
 //     	setTransFromList(pointOfView,oriPoints,clearRange);
 //     }

 //      // called when reality view changed
 //     // change the transfromation status of the video
 //     // (adjust the opacity)
 //     // realityView : int range  from 0..1023
 //     function OnRealityViewChange(realityView)
 //     {
 //     	if ( isReality)
 //     	{
 //     		if (insertVideo() )
 //     		{
 //     			isReality = false;
 //     			setTransFromList(realityView,extraPoints,clearRange);
 //     		}
 //     	}else
 //     	{
 //     		setTransFromList(realityView,extraPoints,clearRange);
 //     	}
 //     }

 //     function insertVideo()
 //     {
 //     	console.log("insert video ");
 //     	removeReality(extraPoints);

 //     	var tempPoint = getTempPoint(oriPoints,pointOfView,clearRange);
 //     	if (tempPoint == null)
 //     		return false;
 //     	tempPoint.val = realityView ;

 //     	insertPoint(extraPoints,tempPoint);
 //     	return true;

 //     }

 //     // get the original film that is playing(in clear range)
 //     function getTempPoint(pointList,val,range)
 //     {
 //     	for ( var i = 1 ; i < pointList.length - 1 ; ++ i )
 //     	{
 //     		if (val > pointList[i].val - (pointList[i].val-pointList[i-1].val) * range
 //     			&& val < pointList[i].val + (pointList[i+1].val-pointList[i].val) * range)
 //     		{
 //     			var p = Point.createNew(pointList[i].val,pointList[i].video,pointList[i].isReality);
 //     			console.log("temp " + i.toString());
 //     			return p;
 //     		}

 //     	}
 //     	return null;
 //     }

 //     // insert point according to value
 //     function insertPoint(pointList,point)
 //     {

 //     	for ( var i = 0 ; i < pointList.length - 1 ; ++ i )
 //     	{
 //     		//console.log(point.val.toString() + " " + pointList[i].val.toString() + " " + pointList[i+1].val.toString());
 //     		if (point.val > pointList[i].val && point.val < pointList[i+1].val)
 //     		{
 //     			pointList.splice(i+1,0,point);
 //     			return;
 //     		}
 //     	}
 //     	pointList.splice(pointList.length,0,point);
 //     }

 //     // insert point according to value
 //     function removeReality(pointList)
 //     {

 //     	for ( var i = 0 ; i < pointList.length - 1 ; ++ i )
 //     	{
 //     		if (pointList[i].isReality)
 //     		{
 //     			var res = pointList[i];
 //     			pointList.splice(i,1);
 //     			return res;
 //     		}
 //     	}
 //     }

 //     function setTransFromList(value,pointList,range)
 //     {
 //     	for ( var i = 0 ; i < pointList.length - 1 ; ++ i )
 //     	{
 //     		// if the point of view in this range
 //     		if (value < pointList[i+1].val && value > pointList[i].val)
 //     		{
 //     			var interval = pointList[i+1].val-pointList[i].val-clearRange*2;
 //     			if (i == 0 )  // the first frame
 //     			{
 //     				var I = pointList[i+1].val-pointList[i].val;
 //     				var r = I * range;
 //     				var trans =  ( - value + pointList[i].val + I - r ) / ( I - r );
 //     				setTrans(pointList[i].video,pointList[i+1].video,trans);
 //     			}else if (i == pointList.length - 2 ) // the last frame
 //     			{
 //     				var I = pointList[i+1].val-pointList[i].val;
 //     				var r = I * range;
 //     				var trans = ( - value + pointList[i].val+ I ) / ( I - r );
 //     				setTrans(pointList[i].video,pointList[i+1].video,trans);
 //     			}else{ // frames between
 //     				var I = pointList[i+1].val-pointList[i].val;
 //     				var r = I * range;
 //         			var trans = ( - value +pointList[i].val + I -  r ) / ( I - 2 * r);
 //     				setTrans(pointList[i].video,pointList[i+1].video,trans);
 //     			}
 //     		}
 //     	}

 //     }

 //     function hideAll()
 //     {
 //     	for (var i = oriVideos.length - 1; i >= 0; i--) {
 //     		oriVideos[i].hide();
 //     	};

 //     	for (var i = extraVideos.length - 1; i >= 0; i--) {
 //     		extraVideos[i].hide();
 //     	};
 //     }

 //    // window.addEventListener('keydown',this.doKeyDown,false);
 //    window.addEventListener('keypress', doKeyPress,false);
 //    // window.addEventListener('keyup',this.doKeyUp,false);

	// init();

})(window);
>>>>>>> update the new video play mechanism
